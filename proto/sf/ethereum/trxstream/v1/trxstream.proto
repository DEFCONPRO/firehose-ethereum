syntax = "proto3";

package sf.ethereum.trxstream.v1;

option go_package = "github.com/streamingfast/firehose-ethereum-priv/types/pb/sf/ethereum/trxstream/v1;pbtrxstream";

import "google/protobuf/timestamp.proto";
import "sf/ethereum/type/v2/type.proto";

service TransactionStream {
  rpc Transactions(TransactionRequest) returns (stream Transaction);
}

message TransactionRequest {
}

message TransactionState {
  State previous_state = 1;
  State current_state = 2;
  Transition transition = 10;

  bytes hash = 11;
  Transaction trx = 3;
  sf.ethereum.type.v2.BlockHeader block_header = 4;
  sf.ethereum.type.v2.TransactionTrace transaction_traces = 5;
  uint64 confirmation = 6;
  sf.ethereum.type.v2.BlockHeader head_block_header = 7;
  bytes replaced_by_hash = 8;

  google.protobuf.Timestamp pending_first_seen = 12;
  google.protobuf.Timestamp pending_last_seen = 13;

  enum Transition {
    TRANS_INIT = 0;
    TRANS_POOLED = 1;
    TRANS_MINED = 2;
    TRANS_FORKED = 3;
    TRANS_CONFIRMED = 4;
    TRANS_REPLACED = 5;
    TRANS_SPECULATIVELY_EXECUTED = 6; // makes speculative traces available on a PENDING transaction. May not be emitted if the transaction is seen a block before
  }

  enum State {
    STATE_UNKNOWN = 0;
    STATE_PENDING = 1;
    STATE_IN_BLOCK = 2;
    STATE_REPLACED = 3;
  }
}

// A Transaction not yet in block
message Transaction {
  // consensus
  bytes to = 1;
  uint64 nonce = 2;
  sf.ethereum.type.v2.BigInt gas_price = 3;
  uint64 gas_limit = 4;
  sf.ethereum.type.v2.BigInt value = 5; /* amount of ETH transfered, in addition to used_gas * gas_price, sometimes referred to as `Amount` */
  bytes input = 6;
  bytes v = 7; /* signature values */
  bytes r = 8;
  bytes s = 9;

  // meta
  bytes hash = 21;
  bytes from = 22;
}
